# ==================================================================================================
# DiffusionDPO 项目最终 DOCKERFILE
#
# 作者: Gemini, 基于一次协作式调试会话.
# 日期: 2025-08-08
#
# 本 Dockerfile 是一次深度调试过程的最终产物。下面的注释解释了每一条命令背后的逻辑，
# 并关联了我们共同解决的具体错误，以便于未来的维护。
# ==================================================================================================

# --------------------------------------------------------------------------------------------------
# 阶段 1: 基础镜像选择 (最后的尝试)
# --------------------------------------------------------------------------------------------------
# # 决策逻辑:
# 在多次构建失败后，错误指向了最底层的文件损坏，这极有可能是基础镜像本身或本地Docker环境
# 的问题。作为最后的尝试，我们更换一个经过验证存在的、同样兼容但不同构建批次的官方基础镜像。
#
FROM nvidia/cuda:12.1.1-cudnn8-devel-ubuntu22.04

# --------------------------------------------------------------------------------------------------
# 阶段 2: 环境与系统依赖
# --------------------------------------------------------------------------------------------------
# # 决策逻辑:
# - 设置 `DEBIAN_FRONTEND=noninteractive` 是为了防止apt在构建过程中因交互式提问而挂起。
# - 明确安装 `python3` 和 `python3-dev` 作为基础。
# - `--no-install-recommends` 和 `rm -rf /var/lib/apt/lists/*` 是减小镜像体积的最佳实践。
#
ENV DEBIAN_FRONTEND=noninteractive

RUN apt-get update && \
    apt-get install -y --no-install-recommends \
    python3 \
    python3-dev \
    && rm -rf /var/lib/apt/lists/*

# --------------------------------------------------------------------------------------------------
# 阶段 3: 手动安装并升级 PIP (釜底抽薪的解决方案)
# --------------------------------------------------------------------------------------------------
# # 已解决的问题:
# - apt 安装的 pip 存在 `.pyc` 文件损坏，导致 "bad marshal data" 错误。
#
# # 决策逻辑:
# 我们彻底放弃使用 apt 来安装 pip。转而采用Python官方推荐的引导方式：
# 1. 使用 `python3 -m ensurepip` 命令。这是Python内置的、最可靠的方式，
#    用于在一个环境中安装一个基础版本的 pip。
# 2. 立即使用这个刚安装好的基础版 pip，配合国内镜像源，将自身升级到最新版本。
#    这确保我们后续使用的是一个功能完整且无Bug的最新版 pip。
#
RUN python3 -m ensurepip
RUN pip install --timeout=600 --no-cache-dir -i https://mirrors.aliyun.com/pypi/simple/ --trusted-host mirrors.aliyun.com --upgrade pip

# --------------------------------------------------------------------------------------------------
# 阶段 4: 为方便起见，建立软链接 (SYMLINKS)
# --------------------------------------------------------------------------------------------------
# # 决策逻辑:
# 创建软链接，使得后续可以直接使用 `python` 和 `pip` 命令。
# `-f` (force) 参数可以避免因目标文件已存在而导致的错误。
#
RUN ln -sf /usr/bin/python3 /usr/bin/python && \
    ln -sf /usr/local/bin/pip /usr/local/bin/pip3 && \
    ln -sf /usr/local/bin/pip /usr/bin/pip

# --------------------------------------------------------------------------------------------------
# 阶段 5: PYTHON 依赖安装
# --------------------------------------------------------------------------------------------------
# # 决策逻辑:
# 在拥有了一个全新的、可靠的 pip 之后，我们分步安装依赖，以更好地利用层缓存。
#
WORKDIR /app
COPY requirements.txt .

RUN pip install --timeout=600 --no-cache-dir -i https://mirrors.aliyun.com/pypi/simple/ --trusted-host mirrors.aliyun.com \
    torch torchvision torchaudio

RUN pip install --timeout=600 --no-cache-dir -i https://mirrors.aliyun.com/pypi/simple/ --trusted-host mirrors.aliyun.com \
    -r requirements.txt

# --------------------------------------------------------------------------------------------------
# 阶段 6: 最终的应用程序设置
# --------------------------------------------------------------------------------------------------
COPY . .
CMD ["python", "train.py"]
